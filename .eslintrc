{
  "root": true,
  "extends": ["@nuxt/eslint-config"],
  "rules": {
    "@typescript-eslint/indent": [
      "error",
      2,
      {
        "SwitchCase": 1,
        "VariableDeclarator": 1,
        "outerIIFEBody": 1,
        "MemberExpression": 1,
        "FunctionDeclaration": {
          "parameters": 1,
          "body": 1
        },
        "FunctionExpression": {
          "parameters": 1,
          "body": 1
        },
        "CallExpression": {
          "arguments": 1
        },
        "ArrayExpression": 1,
        "ObjectExpression": 1,
        "ImportDeclaration": 1,
        "flatTernaryExpressions": false,
        "ignoreComments": false,
        "ignoredNodes": [
          "TemplateLiteral *",
          "JSXElement",
          "JSXElement > *",
          "JSXAttribute",
          "JSXIdentifier",
          "JSXNamespacedName",
          "JSXMemberExpression",
          "JSXSpreadAttribute",
          "JSXExpressionContainer",
          "JSXOpeningElement",
          "JSXClosingElement",
          "JSXFragment",
          "JSXOpeningFragment",
          "JSXClosingFragment",
          "JSXText",
          "JSXEmptyExpression",
          "JSXSpreadChild",
          "TSTypeParameterInstantiation",
          "FunctionExpression > .params[decorators.length > 0]",
          "FunctionExpression > .params > :matches(Decorator, :not(:first-child))",
          "ClassBody.body > PropertyDefinition[decorators.length > 0] > .key"
        ],
        "offsetTernaryExpressions": true
      }
    ],
    "@typescript-eslint/quotes":[
      "error",
      "single"
    ],

    "vue/max-attributes-per-line": "off",
    "vue/no-v-html": "off",
    "vue/require-prop-types": "off",
    "vue/require-default-prop": "off",
    "vue/multi-word-component-names": "off",
    "vue/prefer-import-from-vue": "off",

    // reactivity transform
    "vue/no-setup-props-destructure": "off",

    "vue/component-tags-order": ["error", {
      "order": ["script", "template", "style"]
    }],
    "vue/block-tag-newline": ["error", {
      "singleline": "always",
      "multiline": "always"
    }],
    "vue/component-name-in-template-casing": ["error", "PascalCase"],
    "vue/component-options-name-casing": ["error", "PascalCase"],
    "vue/custom-event-name-casing": ["error", "camelCase"],
    "vue/define-macros-order": ["error", {
      "order": ["defineProps", "defineEmits"]
    }],
    "vue/html-comment-content-spacing": ["error", "always", {
      "exceptions": ["-"]
    }],
    "vue/no-restricted-v-bind": ["error", "/^v-/"],
    "vue/no-useless-v-bind": "error",
    "vue/no-v-text-v-html-on-component": "error",
    "vue/padding-line-between-blocks": ["error", "always"],
    "vue/prefer-separate-static-class": "error",

    // extensions
    "vue/array-bracket-spacing": ["error", "never"],
    "vue/arrow-spacing": ["error", { "before": true, "after": true }],
    "vue/block-spacing": ["error", "always"],
    "vue/brace-style": ["error", "stroustrup", { "allowSingleLine": true }],
    "vue/comma-dangle": ["error"],
    "vue/comma-spacing": ["error", { "before": false, "after": true }],
    "vue/comma-style": ["error", "last"],
    "vue/dot-location": ["error", "property"],
    "vue/dot-notation": ["error", { "allowKeywords": true }],
    "vue/eqeqeq": ["error", "smart"],
    // "vue/func-call-spacing": ["off", "never"],
    "vue/key-spacing": ["error", { "beforeColon": false, "afterColon": true }],
    "vue/keyword-spacing": ["error", { "before": true, "after": true }],
    "vue/no-constant-condition": "warn",
    "vue/no-empty-pattern": "error",
    "vue/no-extra-parens": ["error", "functions"],
    "vue/no-irregular-whitespace": "error",
    "vue/no-loss-of-precision": "error",
    "vue/no-restricted-syntax": [
      "error",
      "DebuggerStatement",
      "LabeledStatement",
      "WithStatement"
    ],
    "vue/no-sparse-arrays": "error",
    "vue/object-curly-newline": ["error", { "multiline": true, "consistent": true }],
    "vue/object-curly-spacing": ["error", "always"],
    "vue/object-property-newline": ["error", { "allowMultiplePropertiesPerLine": true }],
    "vue/object-shorthand": [
      "error",
      "always",
      {
        "ignoreConstructors": false,
        "avoidQuotes": true
      }
    ],
    "vue/operator-linebreak": ["error", "before"],
    "vue/prefer-template": "error",
    "vue/quote-props": ["error", "consistent-as-needed"],
    "vue/space-in-parens": ["error", "never"],
    "vue/space-infix-ops": "error",
    "vue/space-unary-ops": ["error", { "words": true, "nonwords": false }],
    "vue/template-curly-spacing": "error"
  }
}
